One comapny can have many products.

Each products belongs to a comapny.

Each products can have many Comments.

Each Comment belongs to a products.

Create a comapny with multiple products, and each products has multiple comments.

Fetch the comapny with products and each product's comments (nested include).

Add soft-delete for comments (paranoid mode).

Order comments by newest first.


 Both await and promises are used to handle the operation asynchronously but the most 
 secure method is promises because in that there are three states such as pending,resolve and rejected 
 and  if the task is not completed yet then it will go to pending , if the task is completed then it will go 
 to the resolve and if the task is rejected then it goes to rejected . by these three method in promises we can easily 
 run the code asynchronously . In promises we can handle the error by using then and catch method but when we use asynchronous
  operation then we used async and await functionality and for handling the error we use try and catch method. 
 In await functionality it helps to remove the complexity of the code which try to block the code and run the code synchronously.





process.beforeExit()
process.disconnect()
process.exit()  
process.message()
process.uncaughtException()
process.env()


What is Process ? 

=>  Node.js ka process object ek global object hai jo current running Node.js process ke baare mein information deta hai   aur usse control bhi karne deta hai.

1) process.beforeExit()

=> Emits the 'beforeExit' event right before the Node.js process exits, if there is no more work pending in the event loop.

2) process.disconnect()

=>  Used when the process is a child process connected to a parent via IPC (Inter-Process Communication), and we want to terminate that connection.
3) process.exit()

=> Immediately terminates the Node.js process with the given exit code.

4) process.message()

=> Enables communication between parent and child processes by sending messages.

5) process.uncaughtException()

=>Catches unhandled exceptions in the application, preventing the app from crashing instantly.

6) process.env()

=> Provides access to the environment variables.