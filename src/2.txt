Absolutely Muskan! Here's a ðŸ”¥ Complex Sequelize Many-to-Many example structured just like your One-to-Many one â€” with clear relationships, nested includes, soft-delete, and ordering!

ðŸ”¥ Complex Sequelize Many-to-Many Example
ðŸŽ¯ Topic: Students â‡„ Clubs â‡„ Events

âœ… Relationships Overview

A Student can join many Clubs (and a Club has many Students).

A Club can host many Events.

Each Event can be attended by many Students (Many-to-Many via EventAttendee).

We want:

Create students and clubs, and link them.

Assign events to clubs.

Enroll students in events.

Fetch a student â†’ their clubs â†’ their events (nested include).

Soft-delete for EventAttendee (paranoid).

Events ordered by date DESC.

ðŸš§ Step-by-Step Breakdown

ðŸ§± 1. Models Setup (models/ folder)

student.model.js:

const { DataTypes } = require('sequelize'); const sequelize = require('../config/db');

const Student = sequelize.define('Student', { name: DataTypes.STRING, });

module.exports = Student;

club.model.js:

const { DataTypes } = require('sequelize'); const sequelize = require('../config/db');

const Club = sequelize.define('Club', { name: DataTypes.STRING, });

module.exports = Club;

studentClub.model.js (Join Table):

const sequelize = require('../config/db');

const StudentClub = sequelize.define('StudentClub', {}, { timestamps: false });

module.exports = StudentClub;

event.model.js:

const { DataTypes } = require('sequelize'); const sequelize = require('../config/db');

const Event = sequelize.define('Event', { title: DataTypes.STRING, eventDate: DataTypes.DATE, });

module.exports = Event;

eventAttendee.model.js (Many-to-Many with extras & soft delete):

const { DataTypes } = require('sequelize'); const sequelize = require('../config/db');

const EventAttendee = sequelize.define( 'EventAttendee', { attendedAt: { type: DataTypes.DATE, defaultValue: DataTypes.NOW, }, }, { paranoid: true, // Soft delete enabled } );

module.exports = EventAttendee;

ðŸ§± 2. models/index.js (Associations)

const Student = require('./student.model'); const Club = require('./club.model'); const StudentClub = require('./studentClub.model'); const Event = require('./event.model'); const EventAttendee = require('./eventAttendee.model');

// Student â‡„ Club Student.belongsToMany(Club, { through: StudentClub }); Club.belongsToMany(Student, { through: StudentClub });

// Club â†’ Event Club.hasMany(Event); Event.belongsTo(Club);

// Student â‡„ Event (via EventAttendee) Student.belongsToMany(Event, { through: EventAttendee }); Event.belongsToMany(Student, { through: EventAttendee });

module.exports = { Student, Club, StudentClub, Event, EventAttendee, };

ðŸ§  3. Controller (controllers/student.controller.js)

const { Student, Club, Event } = require('../models');

const createStudentClubEvent = async (req, res) => { const { studentName, clubName, events } = req.body;

const student = await Student.create({ name: studentName }); const club = await Club.create({ name: clubName });

await student.addClub(club); // many-to-many

const createdEvents = await Promise.all( events.map(event => Event.create({ title: event.title, eventDate: event.date, ClubId: club.id }) ) );

await student.addEvents(createdEvents); // many-to-many with event

res.status(201).json({ student, club, events: createdEvents }); };

const getStudentDetails = async (req, res) => { const student = await Student.findByPk(req.params.id, { include: [ { model: Club, include: [ { model: Event, include: [ { model: Student, attributes: ['id', 'name'], through: { attributes: ['attendedAt'], paranoid: false, }, }, ], order: [['eventDate', 'DESC']], }, ], }, ], });

res.json(student); };

module.exports = { createStudentClubEvent, getStudentDetails };

ðŸš€ Sample Request

POST /api/student

{ "studentName": "Muskan", "clubName": "Coding Ninjas", "events": [ { "title": "Hackathon", "date": "2025-05-10" }, { "title": "Web Dev Bootcamp", "date": "2025-04-22" } ] }

ðŸ‘€ Nested Query Output

Student { Clubs: [ { name: 'Coding Ninjas', Events: [ { title: 'Hackathon', eventDate: '2025-05-10', Students: [ { name: 'Muskan', attendedAt: '2025-04-11' } ] } ] } ] }

Let me know if you want the routes.js or Sequelize sync & database config as well! Or want this turned into a GitHub project template ðŸš€